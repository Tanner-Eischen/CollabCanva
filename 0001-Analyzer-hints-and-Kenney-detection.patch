*** a/src/services/assets/kenneyTileNamer.ts
--- b/src/services/assets/kenneyTileNamer.ts
@@
-export function detectKenneyTileset(assetName: string): boolean {
-  const kenneyIndicators = [/kenney/i, /0x72/i, /(top.?down|platform|rpg).?pack/i];
-  return kenneyIndicators.some(rx => rx.test(assetName));
-}
+/**
+ * Detects Kenney/0x72 style sheets using filename heuristics.
+ * NOTE: we also allow an explicit analyzer hint to bypass this.
+ */
+export function detectKenneyTileset(assetName: string): boolean {
+  const kenneyIndicators = [
+    /kenney/i,      // correct spelling
+    /kenny/i,       // common misspelling
+    /0x72/i,
+    /(top.?down|platform|rpg).?pack/i,
+    /_topdown_/i,
+    /_platformer_/i,
+    /tileset[_-]?\d+/i
+  ];
+  return kenneyIndicators.some(rx => rx.test(assetName));
+}
+
+export type AnalyzerHints = {
+  kenney?: boolean;
+  /** Optional seeded material if known (e.g., "grass" | "water" | "stone") */
+  material?: string;
+};
 
*** a/src/services/assets/analyze/analyzeTileset.ts
--- b/src/services/assets/analyze/analyzeTileset.ts
@@
-import { detectKenneyTileset } from "../kenneyTileNamer";
+import { detectKenneyTileset, AnalyzerHints } from "../kenneyTileNamer";
 import { generateKenneyMetadata } from "../naming/generateKenneyMetadata";
 
-export async function analyzeTileset(input: {
+export async function analyzeTileset(input: {
   imageUrl: string;
   baseMetadata: {
     tileWidth: number; tileHeight: number; rows: number; cols: number;
   };
   assetName: string;
+  hints?: AnalyzerHints;
 }) {
   const { imageUrl, baseMetadata, assetName } = input;
-  const isKenney = detectKenneyTileset(assetName);
+  const isKenney = input.hints?.kenney === true || detectKenneyTileset(assetName);
 
   // ... existing image load + histograms
@@
-  if (isKenney) {
-    const named = await generateKenneyMetadata({ imageUrl, baseMetadata, assetName });
+  if (isKenney) {
+    const named = await generateKenneyMetadata({
+      imageUrl, baseMetadata, assetName,
+      seedMaterial: input.hints?.material
+    });
     return { ...named, analyzer: "kenney" as const };
   }
 
   // fall through to generic analysis ...
   // (generic blob/wang detection kept as-is; see other patches for fallbacks)
   return await analyzeGenericTileset({ imageUrl, baseMetadata, assetName });
 }
 
*** a/src/components/importer/TilesetImporterModal.tsx
--- b/src/components/importer/TilesetImporterModal.tsx
@@
   const [kenneyHint, setKenneyHint] = useState(false);
   const [seedMaterial, setSeedMaterial] = useState<string | undefined>(undefined);
@@
       <div className="mt-3 flex items-center gap-3">
         <label className="flex items-center gap-2">
           <input type="checkbox" checked={kenneyHint} onChange={e=>setKenneyHint(e.target.checked)} />
-          <span>This is a Kenney/0x72 sheet</span>
+          <span>This is a Kenney/0x72 sheet</span>
         </label>
         <select
           className="select select-sm"
           value={seedMaterial ?? ""}
           onChange={e=>setSeedMaterial(e.target.value || undefined)}
         >
           <option value="">Material (auto)</option>
           <option value="grass">Grass</option>
           <option value="water">Water</option>
           <option value="stone">Stone</option>
           <option value="sand">Sand</option>
         </select>
       </div>
@@
   const runAnalyze = async () => {
     setBusy(true);
     try {
       const res = await analyzeTileset({
         imageUrl: uploadUrl,
         baseMetadata: grid,
         assetName: file.name,
-        // old: no hints
+        hints: { kenney: kenneyHint, material: seedMaterial }
       });
       onAnalyzeDone(res);
     } finally { setBusy(false); }
   };
