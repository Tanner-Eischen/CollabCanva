*** a/src/services/assets/analyze/index.ts
--- b/src/services/assets/analyze/index.ts
@@
-import { analyzeTileset } from "./analyzeTileset";
+import { analyzeTileset } from "./analyzeTileset";
+import { quickStats } from "../image/quickStats"; // assumes you have this; else inline simple hue/alpha calc
 
 export async function runFullTilesetAnalysis(input: {
   imageUrl: string;
   baseMetadata: { tileWidth:number; tileHeight:number; rows:number; cols:number };
   assetName: string;
-}) {
+  hints?: import("../kenneyTileNamer").AnalyzerHints;
+}) {
   const res = await analyzeTileset(input);
 
   // if analyzer returned no namedTiles (e.g., confidence too low), generate readable per-tile keys
-  if (!res.namedTiles || Object.keys(res.namedTiles).length === 0) {
+  if (!res.namedTiles || Object.keys(res.namedTiles).length === 0) {
     const { rows, cols } = input.baseMetadata;
     const tiles = await loadTilesAsImageData(input.imageUrl, rows, cols, input.baseMetadata.tileWidth, input.baseMetadata.tileHeight);
     const named: Record<string, number> = {};
     tiles.forEach((img, i) => {
-      const key = `tile.${i.toString().padStart(3,"0")}`;
+      const qs = quickStats(img); // { alphaRatio:0..1, avgHue:0..359 }
+      const key =
+        qs.alphaRatio > 0.25 ? `decal.${i.toString().padStart(3,"0")}` :
+        (qs.avgHue >= 190 && qs.avgHue <= 260) ? `water.${i.toString().padStart(3,"0")}` :
+        (qs.avgHue >= 80 && qs.avgHue <= 160)  ? `grass.${i.toString().padStart(3,"0")}` :
+        (qs.avgHue >= 15 && qs.avgHue <= 45)   ? `stone.${i.toString().padStart(3,"0")}` :
+        `misc.${i.toString().padStart(3,"0")}`;
       if (!(key in named)) named[key] = i;
     });
     res.namedTiles = named;
     res.materials = Array.from(new Set(
       Object.keys(named).map(k => k.split(".")[0]).filter(Boolean)
     ));
   }
 
   return res;
 }
 
*** a/src/services/assets/saveTileset.ts
--- b/src/services/assets/saveTileset.ts
@@
 export async function saveTilesetMeta(id: string, meta: TilesetMeta & {
   namedTiles: Record<string, number>;
 }) {
-  const toSave = { ...meta, index: meta.namedTiles };
+  // ensure index present so AI/painter can use deterministic keys
+  const toSave = { ...meta, index: meta.index ?? meta.namedTiles ?? {} };
   await db.set(`/assets/tilesets/${id}/meta`, toSave);
   await db.set(`/assets/catalog/tilesets/${id}`, {
     id,
     name: meta.name,
     tileSize: meta.tileSize,
     themes: meta.themes ?? [],
     styles: meta.styles ?? ['topdown'],
     supports: meta.supports,
     layers: meta.layers,
     tags: meta.tags ?? [],
     thumbnailUrl: meta.thumbnailUrl
   });
   return toSave;
 }
