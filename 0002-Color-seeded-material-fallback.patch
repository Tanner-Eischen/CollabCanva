*** a/src/services/assets/assetAnalyzer.ts
--- b/src/services/assets/assetAnalyzer.ts
@@
 export function detectMaterialFromName(assetName: string): string {
   const name = assetName.toLowerCase();
   if (name.includes("grass")) return "grass";
   if (name.includes("water")) return "water";
   if (name.includes("stone") || name.includes("rock")) return "stone";
   if (name.includes("sand")) return "sand";
   return "tile";
 }
 
+type HueHistogram = number[];
+type Histogram = { hueHistogram: HueHistogram; avgSaturation: number; avgLightness: number };
+
+const hueIn = (h:number, kind:"green"|"blue"|"brown") => {
+  if (kind === "green") return (h >= 80 && h <= 160);
+  if (kind === "blue")  return (h >= 190 && h <= 260);
+  if (kind === "brown") return (h >= 15 && h <= 45);
+  return false;
+};
+
+export function guessMaterialFromColors(h: Histogram): string | undefined {
+  const total = h.hueHistogram.reduce((a,b)=>a+b,0) || 1;
+  // rough bins: index maps to 0..359; if your hist uses 0..71 for 5Â° buckets adjust here
+  const sumRange = (start:number,end:number) => h.hueHistogram.slice(start,end+1).reduce((a,b)=>a+b,0);
+  const green = sumRange(80,160) / total;
+  const blue  = sumRange(190,260) / total;
+  const neutralish = (h.avgSaturation < 0.25 && h.avgLightness > 0.2 && h.avgLightness < 0.8);
+  if (green > 0.18) return "grass";
+  if (blue  > 0.18) return "water";
+  if (neutralish)   return "stone";
+  return undefined;
+}
+
 export function chooseBaseMaterial(assetName: string, histogram?: Histogram): string {
   const fromName = detectMaterialFromName(assetName);
-  if (fromName !== "tile") return fromName;
-  return "tile";
+  if (fromName !== "tile") return fromName;
+  const fromColor = histogram ? guessMaterialFromColors(histogram) : undefined;
+  return fromColor ?? "tile";
 }
